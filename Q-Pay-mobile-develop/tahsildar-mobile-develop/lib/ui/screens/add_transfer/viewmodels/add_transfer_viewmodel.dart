/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
///
/// state management for UI
///
/// store and manage your liveData in [AddTransferParams].
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:tahsaldar/extensions/data_extension.dart';
import 'package:tahsaldar/extensions/formz_extension.dart';
import 'package:tahsaldar/repositories/transfer_repository.dart';
import 'package:tahsaldar/router/app_router.dart';

import '../../../../events/bus_events.dart';
import '../../../../models/data/bank/bank.dart';
import '../../../../models/data/transfer/transfer.dart';
import '../../../../models/forms/formz_mobile.dart';
import '../../../../models/forms/formz_text.dart';
import '../../../../network/config/env.dart';
import '../../../../repositories/bank_repository.dart';
import '../../../widgets/autocomplete_text_form_field/autocomplete_item_model.dart';
import "add_transfer_params.dart";
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/viewmodels/base_viewmodel.dart';

class AddTransferViewModel extends BaseViewModel {
  final _params = Lazy(() => AddTransferParams());

  AddTransferParams get params => _params.value;

  final _bankRepository = Lazy(() => BankRepository());

  BankRepository get bankRepository => _bankRepository.value;

  final _transferRepository = Lazy(() => TransferRepository());

  TransferRepository get transferRepository => _transferRepository.value;

  @override
  onInit(){
    getBanks();
  }



  mapListOfBanksToAutoCompleteModel(List<Bank> banks) {
    List<AutoCompleteItemModel> temp = [];
    if (banks.isNotEmpty) {
      for (var element in banks) {
        temp.add(AutoCompleteItemModel(id: element.id, value: element.name));
      }
    }
    params.banks.postValue(temp);
  }

  getBanks() {
    callHttpRequest(
      () => bankRepository.findAll(Env.perPage, isPaginate: false),
      loading: baseParams.loading,
      callback: (response) {
        mapListOfBanksToAutoCompleteModel(response ?? []);
      },
    );
  }

  void mobileAttrChanged(MutableLiveData<FormzMobile> attr, String value) {
    final newValue = FormzMobile.dirty(value);
    attr.postValue(newValue);
    if (attr.value.valid) {
      eventBus.fire(const SoftKeyboardEvent());
    }
    params.submit.postValue(params.isFormFilled());
  }

  removeZeroFromPhone() {
    return params.phone.inputValue().startsWith("0")
        ? params.phone.inputValue().replaceFirst("0", "")
        : params.phone.inputValue();
  }

  void attrChanged(MutableLiveData<FormzText> attr, String value) {
    final newValue = FormzText.dirty(value);
    attr.postValue(newValue);
    params.submit.postValue(params.isFormFilled());
  }

  createTransferModel() {
    params.transfer = Transfer(
      name: params.name.inputValue(),
      phone: removeZeroFromPhone(),
      bankId: params.bankId.inputValue(),
      bankAccountNumber: params.bankAccountNumber.inputValue(),
      amount: params.amount.inputValue().replaceAll(",", "").toInteger(),
    );
  }

  addTransferRequest() async {
    createTransferModel();
    eventBus.fire(const SoftKeyboardEvent());
   await callHttpRequest(
      () => transferRepository.createTransfer(params.transfer),
      loading: baseParams.loading,
      callback: (response) async {
        if (response != null) {
          executeTransfer(response);
        }
      },
    );
  }
  void accountNumberChanged(MutableLiveData<FormzText> attr, String value) {
    final newValue = FormzText.dirty(value);
    attr.postValue(newValue);
    if (params.bankAccountNumber.inputValue() !=
        params.confirmBankAccountNumber.inputValue()) {
      params.bankAccountMatch.postValue(false);
    } else {
      params.bankAccountMatch.postValue(true);
    }
    params.submit.postValue(params.isFormFilled());
  }

  executeTransfer(int id) {
    callHttpRequest(
          () => transferRepository.executeTransfer(paymentId: id),
      loading: baseParams.loading,
      callback: (response) async {
        if (response != null) {
          appRouter.pop(true);
        }
      },
    );
  }
}
