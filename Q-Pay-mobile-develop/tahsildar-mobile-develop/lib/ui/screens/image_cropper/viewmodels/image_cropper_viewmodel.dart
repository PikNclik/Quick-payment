/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
///
/// state management for UI
///
/// store and manage your liveData in [ImageCropperParams].
import 'dart:io';
import 'dart:typed_data';

import 'package:easy_localization/easy_localization.dart';
import 'package:image_picker/image_picker.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:tahsaldar/repositories/media_repository.dart';
import 'package:tahsaldar/ui/screens/image_cropper/lib/cropperx.dart';
import 'package:tahsaldar/viewmodels/base_viewmodel.dart';

import '../../../../controllers/auth_controller.dart';
import '../../../../models/data/media_item/media_item.dart';
import '../../../../models/ui_models/ui_message.dart';
import '../../../../repositories/user_repository.dart';
import '../../../../router/app_router.dart';
import '../../../pickers/image_picker.dart';
import "image_cropper_params.dart";

class ImageCropperViewModel extends BaseViewModel {
  final _userRepository = Lazy(() => UserRepository());
  UserRepository get userRepository => _userRepository.value;

  final _mediaRepository = Lazy(() => MediaRepository());
  MediaRepository get mediaRepository => _mediaRepository.value;

  final _params = Lazy(() => ImageCropperParams());
  ImageCropperParams get params => _params.value;




  pickImage() async {
    if (!await Permission.storage.isGranted) {
      if (await Permission.storage.isPermanentlyDenied){
        return;
      } else {
        var response = await Permission.storage.request();
        if (response == PermissionStatus.permanentlyDenied) {
          baseParams.uiMessage.postValue(UiMessage(message: "storage_permission_forever".tr()));
          return;
        }
        if (!response.isGranted) {
          baseParams.uiMessage.postValue(UiMessage(message: "storage_permission".tr()));
          return;
        }
      }

    }
    final image = await openImagePicker();
    if (image != null) {
      final imageBytes = await image.readAsBytes();
      params.rawOriginalImage.postValue(imageBytes);
    }


  }

  adjustingImage() async {
    final imageBytes = await Cropper.crop(cropperKey: params.cropperKey);
    if (imageBytes != null) {
      params.rawAdjustedImage.postValue(imageBytes);
    }
  }

  setProfilePicture() async {
    XFile? xFile;
    if (params.rawAdjustedImage.value != null) {
      /// convert Uint8List to XFile
      xFile = await convertUint8ListToXFile(params.rawAdjustedImage.value!);
      params.pickedImage.postValue(xFile);
    } else if (params.rawOriginalImage.value != null) {
      /// convert Uint8List to XFile
      xFile = await convertUint8ListToXFile(params.rawOriginalImage.value!);
      params.pickedImage.postValue(xFile);
    } else {
      baseParams.uiMessage.postValue(UiMessage(message: 'No Image Uploaded'));
    }
  }

  Future<XFile> convertUint8ListToXFile(Uint8List value) async {
    final tempDir = await getTemporaryDirectory();
    File file = await File('${tempDir.path}/${DateTime.now()}.png').create();
    file.writeAsBytesSync(value);
    return XFile(file.path);
  }

  uploadAndUpdateUserProfile() async {
    await setProfilePicture();
    List<String> photos = [];
    if (params.pickedImage.value != null) {
      photos.add(params.pickedImage.value!.path);
    }
    callHttpRequest(
      () => mediaRepository.uploadMedia(photos),
      loading: baseParams.loading,
      callback: (response) {
        if (response != null && response.isNotEmpty) {
          updateUserProfileImage(response[0]);
        }
      },
    );
    params.pickedImage.postValue(null);
  }

  updateUserProfileImage(MediaItem mediaItem) {
    callHttpRequest(
      () => userRepository.updateUser(params.mappingToFormData(mediaItem.id)),
      loading: baseParams.loading,
      callback: (response) async {
        if (response != null) {
          await AuthenticationController.saveUser(response);
          appRouter.replaceAll([const Main()]);
        }
      },
    );
  }
}
