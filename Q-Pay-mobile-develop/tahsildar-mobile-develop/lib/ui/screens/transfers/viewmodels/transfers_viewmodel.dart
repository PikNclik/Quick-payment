/// Generated By XFlutter Cli.
/// 
/// more info: https://xflutter-cli.aghiadodeh.com
/// 
/// state management for UI
/// 
/// store and manage your liveData in [TransfersParams].
import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import 'package:tahsaldar/extensions/data_extension.dart';
import 'package:tahsaldar/extensions/date_extension.dart';

import '../../../../models/data/payment/payment.dart';
import '../../../../repositories/payment_repository.dart';
import "transfers_params.dart";
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/viewmodels/base_viewmodel.dart';

class TransfersViewModel extends BaseViewModel  with PaginationViewModel<Payment>  {
  final _params = Lazy(() => TransfersParams());
  TransfersParams get params => _params.value;

  final _paymentRepository = Lazy(() => PaymentRepository());
  PaymentRepository get paymentRepository => _paymentRepository.value;

  @override
  onInit() {
    super.onInit();
    getTotalPaid();
    listen();
    getPaginationList();
  }

  @override
  void onDispose() {
    dispose();
    super.dispose();
  }
  @override
  Future<void> fetchData(int page) async {
    if(page==1) {
      baseParams.loading.postValue(true);
    }
    final total = await paymentRepository.getAllTransactions(page, type: 'transfer');
    // tell the view-model the total of items.
    // this will stop loading more data when last data-chunk is loaded
    setTotal(total);
    params.zeroTransfer.postValue(total == 0);
    if(page==1) {
      baseParams.loading.postValue(false);
    }

  }
  getTotalPaid() {
    callHttpRequest(() => paymentRepository.getTotal(month: params.month.value.number,type: "transfer", year: params.year.value.toInteger()), loading: baseParams.loading, callback: (response) {
      if (response != null) {
        params.totalPaid.postValue(response);
      }
    });
  }

  @override
  Stream<PaginationState<List<Payment>>> streamSubscription() {
    return paymentRepository.result;
  }

  @override
  bool areItemsTheSame(Payment a, Payment b) => a.id == b.id;

}
