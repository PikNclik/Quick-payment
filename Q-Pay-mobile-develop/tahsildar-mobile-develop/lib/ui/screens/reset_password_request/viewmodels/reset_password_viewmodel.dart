/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
///
/// state management for UI
///
/// store and manage your liveData in [ResetPasswordParams].
import 'package:easy_localization/easy_localization.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:tahsaldar/extensions/formz_extension.dart';
import 'package:tahsaldar/models/ui_models/ui_message.dart';
import '../../../../events/bus_events.dart';
import '../../../../models/forms/formz_mobile.dart';
import '../../../../models/forms/formz_text.dart';
import '../../../../repositories/user_repository.dart';
import '../../../../router/app_router.dart';
import '../../../../storage/storage.dart';
import "reset_password_params.dart";
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/viewmodels/base_viewmodel.dart';

class ResetPasswordViewModel extends BaseViewModel {
  final _params = Lazy(() => ResetPasswordParams());

  ResetPasswordParams get params => _params.value;

  final _userRepository = Lazy(() => UserRepository());

  UserRepository get userRepository => _userRepository.value;

  ///reset request
  canLogin() => params.mobile.inputValue().isNotEmpty;

  /// check if phone number is valid
  void attrChanged(MutableLiveData<FormzMobile> attr, String value) {
    final newValue = FormzMobile.dirty(value);
    attr.postValue(newValue);
    if (attr.value.valid) {
      // hide soft keyboard
      eventBus.fire(const SoftKeyboardEvent());
    }
    params.submit.postValue(attr.value.valid);
    params.success.postValue(params.submit.value);
  }

  resetPasswordRequest() {
    callHttpRequest(
        () => userRepository.resetPasswordRequest(phone: params.phone),
        loading: baseParams.loading, callback: (response) {
      if (response != null) {
        // appRouter.push(const ResetPasswordVerification());
      } else {
        baseParams.uiMessage.value =
            UiMessage(message: "mobile_number_invalid".tr());
      }
    });
  }

  ///reset password verification code
  onPinChanged(String pinCode) {
    if (pinCode.length == 4) {
      params.pinCode.postValue(pinCode);
      params.submit.postValue(true);
      // hide soft keyboard
      eventBus.fire(const SoftKeyboardEvent());
      verifyCode();
    } else {
      params.submit.postValue(false);
    }
  }

  resendCode() {
    callHttpRequest(
      () => userRepository.resetPasswordRequest(phone: params.phone),
      loading: baseParams.loading,
      onSuccess: (success) {
        if (success) {
          baseParams.uiMessage.postValue(UiMessage(
              message: "code_resent".tr(), state: UiMessageState.success));

          params.resendCodeEnabled.postValue(false);
          AppStorage.setResendCodeDatetime(DateTime.now());
        }
      },
    );
  }

  verifyCode() {
    String pinCode = params.pinCode.value;
    callHttpRequest(
      () => userRepository.resetPasswordVerification(
          code: pinCode, phone: params.phone),
      loading: baseParams.loading,
      callback: (response) async {
        if (response != null) {
          appRouter.push(const ResetPassword());
        } else {
          baseParams.uiMessage.value =
              UiMessage(message: "verification_invalid".tr());
        }
      },
    );
  }

  DateTime enabledDatetime() {
    final datetime = AppStorage.getResendCodeDatetime() ?? DateTime.now();
    return datetime.add(const Duration(minutes: 2));
  }

  /// resetPassword
  void passwordChanged(MutableLiveData<FormzText> attr, String value) {
    final newValue = FormzText.dirty(value);
    attr.postValue(newValue);
    if (params.password.inputValue() != params.confirmPassword.inputValue()) {
      params.passwordMatch.postValue(false);
    } else {
      params.passwordMatch.postValue(true);
    }
    params.submit.postValue(params.isFormFilled());
  }

  resetPassword() {
    String mobile = params.phone;
    callHttpRequest(
      () => userRepository.resetPassword(
          phone: mobile,
          code: params.pinCode.value,
          newPassword: params.password.inputValue(),
          confirmPassword: params.confirmPassword.inputValue()),
      loading: baseParams.loading,
      callback: (response) async {
        if (response != null) {
          appRouter.popUntilRouteWithName(LoginPassword.name);
        }
      },
    );
  }
}
