/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
///
/// state management for UI
///
/// store and manage your liveData in [NotificationsParams].
import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/events/event_emitter.dart';
import 'package:tahsaldar/extensions/nullable_extension.dart';
import 'package:tahsaldar/models/data_models.dart';
import 'package:tahsaldar/repositories/notification_repository.dart';
import 'package:tahsaldar/viewmodels/base_viewmodel.dart';

import "notifications_params.dart";

class NotificationsViewModel extends BaseViewModel with PaginationViewModel<Notification> {
  final _params = Lazy(() => NotificationsParams());
  NotificationsParams get params => _params.value;

  final _repository = Lazy(() => NotificationRepository());
  NotificationRepository get repository => _repository.value;

  final EventEmitter<PaginationState<List<Notification>>> eventEmitter = EventEmitter();

  @override
  void onReady() {
    super.onReady();
    listen();
    getPaginationList();
  }

  @override
  void onDispose() {
    repository.dispose();
    dispose();
    super.onDispose();
  }

  @override
  bool areItemsTheSame(Notification a, Notification b) => a.id == b.id;

  @override
  Future<void> fetchData(int page) async {
    eventEmitter.emitValue(const PaginationLoading());
    try {
      final response = await repository.findAll(page);
      if (response.data?.data != null) {
        final list = response.data!.data.orEmpty();
        eventEmitter.emitValue(PaginationSuccess(list));
      }
      setTotal(response.data?.total ?? 0);
    } catch (_) {
      eventEmitter.emitValue(const PaginationError());
    }
  }

  @override
  Stream<PaginationState<List<Notification>>> streamSubscription() => eventEmitter.result;
}
