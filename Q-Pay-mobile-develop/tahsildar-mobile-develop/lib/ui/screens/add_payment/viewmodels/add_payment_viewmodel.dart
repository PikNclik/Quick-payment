/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
///
/// state management for UI
///
/// store and manage your liveData in [AddPaymentParams].
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/extensions/data_extension.dart';
import 'package:tahsaldar/extensions/formz_extension.dart';
import 'package:tahsaldar/models/data/payment/payment.dart';
import 'package:tahsaldar/models/forms/formz_mobile.dart';
import 'package:tahsaldar/models/forms/formz_text.dart';
import 'package:tahsaldar/repositories/setting_repository.dart';
import 'package:tahsaldar/router/app_router.dart';
import 'package:tahsaldar/viewmodels/base_viewmodel.dart';

import '../../../../events/bus_events.dart';
import '../../../../repositories/payment_repository.dart';
import "add_payment_params.dart";

class AddPaymentViewModel extends BaseViewModel {
  final _params = Lazy(() => AddPaymentParams());
  AddPaymentParams get params => _params.value;

  final _paymentRepository = Lazy(() => PaymentRepository());
  PaymentRepository get paymentRepository => _paymentRepository.value;

  final _settingRepository = Lazy(() => SettingRepository());
  SettingRepository get settingRepository => _settingRepository.value;

  @override
  void onInit() {
    getFeesPercentage();
    super.onInit();
  }

  void attrChanged(MutableLiveData<FormzText> attr, String value) {
    final newValue = FormzText.dirty(value);
    attr.postValue(newValue);
    params.submit.postValue(params.isFormFilled());
  }


  void paymentAmountAttrChanged(MutableLiveData<FormzText> attr, String value) {
    final newValue = FormzText.dirty(value);
    attr.postValue(newValue);
    if (params.paymentAmount.inputValue().isEmpty) {
      params.amount.postValue(0);
      params.fees.postValue(0);
      params.totalAmount.postValue(0);
    } else {
      params.amount.postValue(params.calculateAmount);
      params.fees.postValue(params.calculateFees);
      params.totalAmount.postValue(params.calculateTotalAmount);
    }
    params.submit.postValue(params.isFormFilled());
  }

  /// check if phone number is valid
  void mobileAttrChanged(MutableLiveData<FormzMobile> attr, String value) {
    final newValue = FormzMobile.dirty(value);
    attr.postValue(newValue);
    if (attr.value.valid) {
      // hide soft keyboard
      eventBus.fire(const SoftKeyboardEvent());
    }
    params.submit.postValue(params.isFormFilled());
  }

  scheduleAndSend(dynamic dateTime) {
    params.scheduledDate.postValue(dateTime);
  }

  pickExpiryDate(DateTime dateTime) {
    params.expiryDate.postValue(dateTime);
  }
  removeZeroFromPhone(){
   return  params.payerMobile.inputValue().startsWith("0")?params.payerMobile.inputValue().replaceFirst("0", ""): params.payerMobile.inputValue();
  }


  createPaymentModel() {
    params.payment =Payment(
        payerName: params.payerName.inputValue(),
        payerMobileNumber:removeZeroFromPhone(),
        amount: params.paymentAmount.inputValue().replaceAll(",", "").toInteger(),
        details: params.note.inputValue(),
        expiryDate: params.expiryDate.value,
        scheduledDate: params.scheduledDate.value);
  }
  updatePaymentModel() {
    params.payment =params.payment.copyWith(
        id: params.payment.id,
        payerName: params.payerName.inputValue(),
        payerMobileNumber:removeZeroFromPhone(),
        amount: params.paymentAmount.inputValue().replaceAll(",", "").toInteger(),
        details: params.note.inputValue(),
        expiryDate: params.expiryDate.value,
        scheduledDate: params.scheduledDate.value);
  }
  convertModelToField(Payment payment) {
    params.payment=payment;
    params.payerName.value=FormzText.pure(payment.customer?.name??'');
    params.payerMobile.value=FormzMobile.pure(payment.customer?.phone??'');
    params.paymentAmount.value=FormzText.pure(payment.amount.toString());
    params.note.value=FormzText.pure(payment.details??'');
    params.expiryDate.value=payment.expiryDate;
    params.scheduledDate.value=payment.scheduledDate;
    paymentAmountAttrChanged(params.paymentAmount,params.paymentAmount.inputValue());
  }

  addPaymentRequest() {
    createPaymentModel();
    eventBus.fire(const SoftKeyboardEvent());
    callHttpRequest(
      () => paymentRepository.create(params.payment),
      loading: baseParams.loading,
      callback: (response) async {
        if (response != null) {
          params.payment = response;
          appRouter.pop(true);
        }
      },
    );
  }
  updatePaymentRequest() async {
    updatePaymentModel();
   await callHttpRequest(
          () => paymentRepository.update(params.payment.id.toString()??'',params.payment),
      loading: baseParams.loading,
      callback: (response) async {
            if(response!=null){
              appRouter.pop(true);

            }
      },
    );
  }

  getFeesPercentage() {
    callHttpRequest(
      () => settingRepository.findOne("fees_percentage"),
      loading: baseParams.loading,
      callback: (response) {
        if (response != null) {
          final value = num.tryParse(response.value.toString());
          if (value != null){
            params.feesPercentage = (value / 100).toDouble();
            params.amount.postValue(params.calculateAmount);
            params.fees.postValue(params.calculateFees);
            params.totalAmount.postValue(params.calculateTotalAmount);

          }
        }
      },
    );
  }
}
