/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com

import 'dart:async';

import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/extensions/data_extension.dart';
import 'package:tahsaldar/extensions/date_extension.dart';
import 'package:tahsaldar/models/data_models.dart';
import 'package:tahsaldar/models/responses/base_response/base_response.dart';
import 'package:tahsaldar/network/payment_rest_client/payment_rest_client.dart';

import 'base_repository.dart';

class PaymentRepository extends BaseRepository {
  final _paymentRestClient = Lazy<PaymentRestClient>(() => PaymentRestClient(GetIt.I.get<Dio>()));
  PaymentRestClient get paymentRestClient => _paymentRestClient.value;

  Future<BaseResponse<Payment>> create(Payment payment) {
    final cancelToken = CancelToken();
    return getResponse(
      () => paymentRestClient.create(payment: payment, cancelToken: cancelToken).onError((error, _) => catchError<Payment>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<Payment>> update(String id, Payment payment) {
    final cancelToken = CancelToken();
    return getResponse(
      () => paymentRestClient.update(id: id, payment: payment, cancelToken: cancelToken).onError((error, _) => catchError<Payment>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<List<Payment>>> findAll(int page, {String? query}) {
    final cancelToken = CancelToken();
    return getResponse(
      () => paymentRestClient.findAll(page: page, query: query, cancelToken: cancelToken).onError((error, _) => catchError<List<Payment>>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<Payment>> findOne(String id) {
    final cancelToken = CancelToken();
    return getResponse(
      () => paymentRestClient.findOne(id: id, cancelToken: cancelToken).onError((error, _) => catchError<Payment>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<dynamic>> delete(String id) {
    final cancelToken = CancelToken();
    return getResponse(
      () => paymentRestClient.delete(id: id, cancelToken: cancelToken).onError((error, _) => catchError<dynamic>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<Payment>> cancel(String id) {
    final cancelToken = CancelToken();
    return getResponse(
      () => paymentRestClient.cancel(id: id, cancelToken: cancelToken).onError((error, _) => catchError<Payment>(error)),
      cancelToken: cancelToken,
    );
  }

  final _controller = StreamController<PaginationState<List<Payment>>>();

  Stream<PaginationState<List<Payment>>> get result async* {
    yield* _controller.stream;
  }

  Future<BaseResponse<TotalPaid>> getTotal({int? month, int? year,required String type}) {
    final cancelToken = CancelToken();
    return getResponse(
      () => paymentRestClient.getTotal(month: month.toString().addZero(),type: type, year: year.toString(), cancelToken: cancelToken).onError((error, _) => catchError<TotalPaid>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<int> getAllTransactions(
    int page, {
    String? userId,
    String? status,
    String? query,
  required  String type,
  }) async {
    /// emit loading
    _controller.add(const PaginationLoading());

    /// fetch data from server
    try {
      final response = await paymentRestClient.getTransactions(
        type: type,
        page: page,
        userId: userId,
        status: status,
        query: query?.notEmptyOrNull(),
      );
      if (response.status != null && response.status! && response.data?.data != null) {
        /// emit fetched data
        _controller.add(PaginationSuccess(response.data!.data!));
      } else {
        _controller.add(const PaginationError());
      }
      return response.data?.total ?? 0;
    } catch (_) {
      /// emit error
      _controller.add(const PaginationError());
      return 0;
    }
  }
}
