/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com

import 'dart:async';

import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/models/data_models.dart';
import 'package:tahsaldar/models/responses/base_response/base_response.dart';
import 'package:tahsaldar/network/bank_rest_client/bank_rest_client.dart';

import 'base_repository.dart';

class BankRepository extends BaseRepository {
  final _bankRestClient = Lazy<BankRestClient>(() => BankRestClient(GetIt.I.get<Dio>()));
  BankRestClient get bankRestClient => _bankRestClient.value;

  Future<BaseResponse<Bank>> create(Bank bank) {
    final cancelToken = CancelToken();
    return getResponse(
      () => bankRestClient.create(bank: bank, cancelToken: cancelToken).onError((error, _) => catchError<Bank>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<Bank>> update(String id, Bank bank) {
    final cancelToken = CancelToken();
    return getResponse(
      () => bankRestClient.update(id: id, bank: bank, cancelToken: cancelToken).onError((error, _) => catchError<Bank>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<List<Bank>>> findAll(int page, {String? query, bool isPaginate = true}) {
    final cancelToken = CancelToken();
    return getResponse(
      () => bankRestClient
          .findAll(page: page, query: query, isPaginate: isPaginate, cancelToken: cancelToken)
          .onError((error, _) => catchError<List<Bank>>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<Bank>> findOne(String id) {
    final cancelToken = CancelToken();
    return getResponse(
      () => bankRestClient.findOne(id: id, cancelToken: cancelToken).onError((error, _) => catchError<Bank>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<dynamic>> delete(String id) {
    final cancelToken = CancelToken();
    return getResponse(
      () => bankRestClient.delete(id: id, cancelToken: cancelToken).onError((error, _) => catchError<dynamic>(error)),
      cancelToken: cancelToken,
    );
  }
}
