/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com

import 'dart:async';

import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:tahsaldar/models/data_models.dart';
import 'package:tahsaldar/models/responses/base_response/base_response.dart';
import 'package:tahsaldar/network/transfer_rest_client/transfer_rest_client.dart';

import '../models/data/transfer/transfer.dart';
import 'base_repository.dart';

class TransferRepository extends BaseRepository {
  final _transferRestClient = Lazy<TransferRestClient>(() => TransferRestClient(GetIt.I.get<Dio>()));
  TransferRestClient get transferRestClient => _transferRestClient.value;

  Future<BaseResponse<int>> createTransfer(Transfer transfer) {
    final cancelToken = CancelToken();
    return getResponse(
      () => transferRestClient.createTransfer(transfer: transfer, cancelToken: cancelToken).onError((error, _) => catchError<int>(error)),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<dynamic>> executeTransfer({required int paymentId}) {
    final cancelToken = CancelToken();
    return getResponse(
      () => transferRestClient.executeTransfer(paymentId: paymentId, cancelToken: cancelToken).onError((error, _) => catchError<Payment>(error)),
      cancelToken: cancelToken,
    );
  }


}
