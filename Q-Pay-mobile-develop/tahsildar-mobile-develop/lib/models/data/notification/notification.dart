/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
import 'dart:convert';

import "package:collection/collection.dart";
import 'package:flutter/foundation.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:tahsaldar/extensions/date_extension.dart';
import 'package:tahsaldar/extensions/nullable_extension.dart';

part 'notification.freezed.dart';
part 'notification.g.dart';

// ----------(json)----------
/*
{
  "id": "69ae22be-d4a5-422f-a7cf-d6ddd65206d6",
  "type": "App\\Notifications\\UserNotification",
  "notifiable_type": "App\\Models\\User",
  "notifiable_id": 1,
  "data": "{\"title\":\"Payment With Invoice Num #1 Status has updated\",\"body\":\"Payment With Invoice Num #'.1.' Status has updated\",\"payload\":{\"payment_id\":1,\"image\":\"http:\\/\\/127.0.0.1:8000\\/images\\/notifications\\/default.png\"}}",
  "read_at": null,
  "created_at": "2023-02-20T09:16:52.000000Z",
  "updated_at": "2023-02-20T09:16:52.000000Z"
} 
*/
// --------------------------

@freezed
class Notification with _$Notification {
  const factory Notification({
    String? id,
    String? type,
    String? notifiableType,
    int? notifiableId,
    dynamic data,
    String? readAt,
    DateTime? createdAt,
    String? updatedAt,
  }) = _Notification;

  factory Notification.fromJson(Map<String, dynamic> json) => _$NotificationFromJson(json);
}

extension NotificationUtils on Notification {
  String dataKey(String key) {
    try {
      final json = jsonDecode(data.toString());
      return json[key].toString();
    } catch (_) {
      return "-";
    }
  }

  String payloadKey(String key) {
    try {
      final payload = jsonDecode(data.toString());
      return payload["payload"][key].toString();
    } catch (error) {
      return "-";
    }
  }
}

extension NotificationListUtils on List<Notification> {
  /// grouping list by month.
  ///
  /// only current month will grouping as:
  /// * if less than last week => last week
  /// * if more than last week => this month
  Map<String, List<Notification>> groupByDate() {
    final Map<String, List<Notification>> list = {};
    final now = DateTime.now();
    final yesterdayDate = DateTime.now().subtract(const Duration(days: 1));

    try {
      final mostRecentWeekday = now.toUtc().mostRecentWeekday(0);

      Map<String?, List<Notification>> groupByMonth = groupBy(this, (obj) => obj.createdAt?.toIso8601String().substring(0, 7));

      final dates = where((e) => e.createdAt != null).toList().filterNotNull();

      /// insert today (recently) dates
      final today = dates.where((element) => element.createdAt!.isSameDay(now)).toList();
      list.putIfAbsent("today", () => today);

      /// insert today (recently) dates
      final yesterday = dates.where((element) => element.createdAt!.isSameDay(yesterdayDate)).toList();
      list.putIfAbsent("yesterday", () => yesterday);

      /// insert lastWeek dates
      final lastWeek = dates
          .where(
              (element) => element.createdAt!.isAfter(mostRecentWeekday) && !element.createdAt!.isSameDay(now) && !element.createdAt!.isSameDay(yesterdayDate))
          .toList();
      list.putIfAbsent("last_week", () => lastWeek);

      /// insert this Month dates
      final thisMonth = dates
          .where((element) =>
              element.createdAt!.isSameMonth(now) &&
              !element.createdAt!.isSameDay(now) &&
              !element.createdAt!.isAfter(
                mostRecentWeekday,
              ))
          .toList();
      list.putIfAbsent("last_month", () => thisMonth);

      groupByMonth.forEach((date, group) {
        final createdAt = group.firstOrNull?.createdAt ?? now;

        /// insert list if the dates not belong to this month
        if (!createdAt.isSameMonth(now)) {
          list.putIfAbsent(createdAt.monthFormat, () => group);
        }
      });
    } catch (error) {
      if (kDebugMode) print("groupByDate: $error");
    }

    return list;
  }
}
