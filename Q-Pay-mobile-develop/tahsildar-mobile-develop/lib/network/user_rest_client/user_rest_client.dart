/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
import 'package:dio/dio.dart';
import 'package:retrofit/retrofit.dart';
import 'package:tahsaldar/models/data_models.dart';
import 'package:tahsaldar/models/responses/base_response/base_response.dart';

import '../../models/data/city/city.dart';
import '../config/env.dart';

part 'user_rest_client.g.dart';

@RestApi()
abstract class UserRestClient {
  factory UserRestClient(Dio dio) = _UserRestClient;

  @POST("/login")
  Future<BaseResponse<bool>> login({
    @Field("phone") required String phone,
    @Field("send")  required bool send,
    @CancelRequest() CancelToken? cancelToken,
  });


  @POST("/verify-code")
  Future<BaseResponse<LoginResponse>> verifyCode({
    @Field("phone") required String number,
    @Field("verification_code") required String code,
    @CancelRequest() CancelToken? cancelToken,
  });

  @POST("/login-password")
  Future<BaseResponse<LoginResponse>> loginPassword({
    @Field("phone") required String phone,
    @Field("password") required String password,
    @CancelRequest() CancelToken? cancelToken,
  });
  @POST("/reset-password-request")
  Future<BaseResponse<dynamic>> resetPasswordRequest({
    @Field("phone") required String phone,
    @CancelRequest() CancelToken? cancelToken,
  });
  @POST("/reset-password-verification")
  Future<BaseResponse<dynamic>> resetPasswordVerification({
    @Field("phone") required String phone,
    @Field("code") required String code,
    @CancelRequest() CancelToken? cancelToken,
  });
  @POST("/reset-password")
  Future<BaseResponse<dynamic>> resetPassword({
    @Field("phone") required String phone,
    @Field("code") required String code,
    @Field("new_password") required String newPassword,
    @Field("confirm_password") required String confirmPassword,
    @CancelRequest() CancelToken? cancelToken,
  });
  @POST("/user/change-password")
  Future<BaseResponse<LoginResponse>> changePassword({
    @Field("old_password") required String oldPassword,
    @Field("new_password") required String newPassword,
    @Field("confirm_password") required String confirmPassword,
    @CancelRequest() CancelToken? cancelToken,
  });

  @POST("/logout")
  Future<BaseResponse<dynamic>> logOut({
    @Field("device_id") required String deviceId,
    @Field("fcm_token") String? token,
    @CancelRequest() CancelToken? cancelToken,
  });

  @DELETE("/user/{id}")
  Future<BaseResponse<dynamic>> deleteUser({
    @Path("id") required int id,
    @CancelRequest() CancelToken? cancelToken,
  });


  @POST("/user")
  @MultiPart()
  Future<BaseResponse<User>> register({
    @Part(name: "_method") String method = "PUT",
    @Part(name: "full_name") required String fullName,
    @Part(name: "bank_id") required String bankId,
    @Part(name: "bank_account_number") required String accountNumber,
    @Part(name: "city_id") required String cityId,
    @Part(name: "password") required String password,
    @CancelRequest() CancelToken? cancelToken,
  });

  @POST("/user")
  Future<BaseResponse<User>> updateUser({
    @Body() required FormData user,
    // @Part(name: "_method") String method = "PUT",
    // @Part(name: "full_name") required String fullName,
    // @Part(name: "bank_id") required int bankId,
    // @Part(name: "bank_account_number") required String accountNumber,
    // @Part(name: "city_id") required int cityId,
    // @Part(name: "email") String? email,
    // @Part(name: "file[0]") int? file,
    @CancelRequest() CancelToken? cancelToken,
  });

  @GET("/user")
  Future<BaseResponse<User>> getUser({
    @CancelRequest() CancelToken? cancelToken,
  });

  @POST("/user/fcm-token")
  Future<BaseResponse<dynamic>> setFcmToken({
    @Field("fcm_token") required String token,
    @Field("fcm_platform") required String platform,
    @CancelRequest() CancelToken? cancelToken,
  });

  @POST("/user/language")
  Future<BaseResponse<dynamic>> updateLanguage({
    @Field("language") required String language,
    @CancelRequest() CancelToken? cancelToken,
  });

  @DELETE("/user/fcm-token")
  Future<BaseResponse<dynamic>> removeFcmToken({
    @CancelRequest() CancelToken? cancelToken,
  });

  @GET("/cities") //todo
  Future<BaseResponse<List<City>>> getAddresses({
    @Query("page") required int page,
    @Query("per_page") int perPage = Env.perPage,
    @Query("search") String? query,
    @Query("isPaginate") bool? isPaginate,
    @CancelRequest() CancelToken? cancelToken,
  });
}
