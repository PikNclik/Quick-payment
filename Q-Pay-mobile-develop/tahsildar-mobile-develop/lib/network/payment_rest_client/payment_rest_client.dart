/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
import 'package:dio/dio.dart';
import 'package:retrofit/retrofit.dart';
import 'package:tahsaldar/models/data_models.dart';
import 'package:tahsaldar/models/responses/base_response/base_response.dart';
import 'package:tahsaldar/network/config/env.dart';

import '../../models/responses/list_response/list_response.dart';

part 'payment_rest_client.g.dart';

@RestApi()
abstract class PaymentRestClient {
  factory PaymentRestClient(Dio dio) = _PaymentRestClient;

  @GET("/payment/total-paid")
  Future<BaseResponse<TotalPaid>> getTotal({
    @Query("month") String? month,
    @Query("year") String? year,
    @Query("type") String? type,
    @CancelRequest() CancelToken? cancelToken,
  });

  @GET("/payment")
  Future<BaseResponse<ListResponse<Payment>>> getTransactions({
    @Query("type") required String type,
    @Query("user_id") String? userId,
    @Query("page") required int page,
    @Query("per_page") int perPage = Env.perPage,
    @Query("status") String? status,
    @Query("search") String? query,
  });

  @POST("/payment")
  Future<BaseResponse<Payment>> create({
    @Body() required Payment payment,
    @CancelRequest() CancelToken? cancelToken,
  });

  @PUT("/payment/{id}")
  Future<BaseResponse<Payment>> update({
    @Path("id") required String id,
    @Body() required Payment payment,
    @CancelRequest() CancelToken? cancelToken,
  });

  @GET("/payment")
  Future<BaseResponse<List<Payment>>> findAll({
    @Query("page") required int page,
    @Query("per_page") int perPage = Env.perPage,
    @Query("search") String? query,
    @CancelRequest() CancelToken? cancelToken,
  });

  @GET("/payment/{id}")
  Future<BaseResponse<Payment>> findOne({
    @Path("id") required String id,
    @CancelRequest() CancelToken? cancelToken,
  });

  @DELETE("/payment/{id}")
  Future<BaseResponse<dynamic>> delete({
    @Path("id") required String id,
    @CancelRequest() CancelToken? cancelToken,
  });

  @POST("/payment/cancel/{id}")
  Future<BaseResponse<Payment>> cancel({
    @Path("id") required String id,
    @CancelRequest() CancelToken? cancelToken,
  });
}
